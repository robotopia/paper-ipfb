Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2019-11-28T06:51:19+08:00

With the latest imrpovement, the errors are arguably within a tolerable level (git commit b859866):

{{{code: lang="sh" linenumbers="False"
> cd ~/documents/fine-pfb-reconstruction/test-data/before
> ../../forward-pfb-model/forward_pfb Rec09_1213668800.raw ../../forward-pfb-model/r.txt 0 0 Rec09_1213668800.dat > prefft.dat
> ../../forward-pfb-model/read_after Rec09_1213668800.dat 96 100 1123 > foo1
> ../../forward-pfb-model/read_after ../after/1213668624_1213668800_ch117.dat 96 100 1123 > foo2
python> import numpy as np
python> import matplotlib.pyplot as plt
python> dat1 = np.loadtxt("foo1"); dat2 = np.loadtxt("foo2")
python> plt.imshow(dat1 - dat2, origin='auto', extent=(99.5,1123.5,-0.5,128.5)); plt.colorbar()

}}}


{{~/documents/fine-pfb-reconstruction/test-data/before/compare_dynspec_diff_02.png?width=800}}

This image is showing both the real and imaginary parts of the answer, as alternate columns. X-axis is (10 kHz) sample number, and y-axis is fine frequency channel number. You can see the "extra" error that occurs every 500th sample â€” the first of these is shown at sample 506. (NB: there is a strong correlation between the errors in the real and imaginary parts of that sample.)

Choosing a block of samples that doesn't include the really bad sample, I can estimate the fraction of pixels that have been incorrectly quantised by my own PFB code. Following on from the code block above:

{{{code: lang="sh" linenumbers="False"
python> bad = (dat1[:,0:800] - dat2[:,0:800] != 0)
python> np.sum(bad)/np.size(bad)*100

}}}


gives 0.984375%, or, we can simply say, < 1%.

At this point, I am going to get rid of all the extra "debugging" outputs in my PFB code, so that the only thing it produces is a recombined file (git commit 2287282).

--------------------

Next step is to estimate the difference that these quantisation errors make in the analysis-synthesis chain. I will do this by putting both //my// output and the //true// output through the PFB inverter, and comparing the resulting VDIF files.

Run make_beam on the true fine channels:
{{{code: lang="sh" linenumbers="False"
> cd ~/documents/fine-pfb-reconstruction/test-data/after
> rm -f G0024_1213668624_ch117_u.vdif
> make_beam -o 1213668624 -b 1213668800 -e 1213668800 -z 2018-06-22T02:13:02 \
    -R "03:56:52.80" -D "-26:45:00.0" \
    -d /home/smcsweeney/documents/fine-pfb-reconstruction/test-data/after \
    -m /home/smcsweeney/documents/fine-pfb-reconstruction/test-data/after/metadata.fits \
    -f 117 -u -A 48 \
    -J /home/smcsweeney/documents/fine-pfb-reconstruction/test-data/after

}}}


And then run make_beam on my fine channels:
{{{code: lang="sh" linenumbers="False"
> cd ~/documents/fine-pfb-reconstruction/test-data/before
> rm -f G0024_1213668624_ch117_u.vdif
> make_beam -o 1213668624 -b 1213668800 -e 1213668800 -z 2018-06-22T02:13:02 \
    -R "03:56:52.80" -D "-26:45:00.0" \
    -d /home/smcsweeney/documents/fine-pfb-reconstruction/test-data/before \
    -m /home/smcsweeney/documents/fine-pfb-reconstruction/test-data/after/metadata.fits \
    -f 117 -u -A 48 \
    -J /home/smcsweeney/documents/fine-pfb-reconstruction/test-data/after

}}}


Both runs produced a (commonly seen) warning, but with slightly different details:
{{{code: lang="sh" linenumbers="False"
(true:) warning: vdif_write_second: significantly non-zero mean (-0.269758), adjusting data
(mine:) warning: vdif_write_second: significantly non-zero mean (-0.260065), adjusting data
}}}


Making sure my VDIF outputs actually correlate with the original raw channel:
{{{code: lang="sh" linenumbers="False"
> cd ~/documents/fine-pfb-reconstruction/test-data/after
> ../../forward-pfb-model/read_vdif G0024_1213668624_ch117_u.vdif 0 0.4912 0.4952 > vdif_antpol.dat
> ../../forward-pfb-model/correlate_coarse ../before/Rec09_1213668800.raw vdif_antpol.dat 0 0.49 0.51 > correlated_ch0.dat
gnuplot> p 'correlated_ch0.dat' matrix w image

}}}


{{{code: lang="sh" linenumbers="False"
> cd ~/documents/fine-pfb-reconstruction/test-data/before
> ../../forward-pfb-model/read_vdif G0024_1213668624_ch117_u.vdif 0 0.4912 0.4952 > vdif_antpol.dat
> ../../forward-pfb-model/correlate_coarse ../before/Rec09_1213668800.raw vdif_antpol.dat 0 0.49 0.51 > correlated_ch0.dat
gnuplot> p 'correlated_ch0.dat' matrix w image

}}}


I'm not posting the resulting images, but doing this, you can verify that both outputs correlate with the original raw file. The pixel to look out for is in the bottom left corner of (both) the images.

To compare the VDIF outputs together (for an arbitrary section taken out of the middle):
(git commit c17b887)
{{{code: lang="sh" linenumbers="False"
> cd ~/documents/fine-pfb-reconstruction/test-data
gnuplot> load 'compare_vdif.gpi'

}}}


**compare_vdif.gpi**:
{{{code: lang="sh" linenumbers="True"
reset

set xlabel "Sample number"
set xrange [1000:1500]

set multiplot layout 2,1

set ylabel "Coarse channel value (real)"

p '< ../forward-pfb-model/read_vdif after/G0024_1213668624_ch117_u.vdif 0 0.4912 0.4952' \
    u 1 w l title "FPGA", \
  '< ../forward-pfb-model/read_vdif before/G0024_1213668624_ch117_u.vdif 0 0.4912 0.4952' \
    u 1 w l title "My implementation"

set ylabel "Coarse channel value (imag)"

p '< ../forward-pfb-model/read_vdif after/G0024_1213668624_ch117_u.vdif 1 0.4912 0.4952' \
    u 1 w l title "FPGA", \
  '< ../forward-pfb-model/read_vdif before/G0024_1213668624_ch117_u.vdif 1 0.4912 0.4952' \
    u 1 w l title "My implementation"

unset multiplot

}}}


{{~/documents/fine-pfb-reconstruction/test-data/fpga_vs_mine_compare_vdif.png?width=700}}

Looks pretty good! Now for a more quantitative estimate of the difference that (my) quantisation errors make:

{{{code: lang="sh" linenumbers="False"
> cd ~/documents/fine-pfb-reconstruction/test-data
> ../forward-pfb-model/read_vdif after/G0024_1213668624_ch117_u.vdif 0 0.2 0.9 > foo1
> ../forward-pfb-model/read_vdif before/G0024_1213668624_ch117_u.vdif 0 0.2 0.9 > foo2
> python compare_vdif.py

}}}


**compare_vdif.py**:
{{{code: lang="python3" linenumbers="True"
import numpy as np

dat1 = np.loadtxt("foo1")
dat2 = np.loadtxt("foo2")

# Calculate the power of each signal
powers1 = dat1[:,0]**2 + dat1[:,1]**2
powers2 = dat2[:,0]**2 + dat2[:,1]**2

diff = dat1 - dat2
diff_powers = diff[:,0]**2 + diff[:,1]**2

# Calculate the average number difference per pixel
avg_diff = np.mean(np.abs(diff))

# Calculate the average power difference per sample
avg_pow_diff = np.mean(diff_powers)/np.mean(powers1)

# Calculate percentage difference of average power over all samples
total_pow_diff = np.abs(np.mean(powers1)/np.mean(powers2) - 1)

# Print out the results
print("Average re & im difference per pixel = {0:.4f}".format(avg_diff))
print("Average power difference per pixel   = {0:.4f}%".format(avg_pow_diff*100))
print("Total power difference               = {0:.4f}%".format(total_pow_diff*100))

}}}


And the results are:
{{{code: lang="sh" linenumbers="False"
Average re & im difference per pixel = 0.8373
Average power difference per pixel   = 0.7955%
Total power difference               = 0.0123%

}}}



